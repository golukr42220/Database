{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\froman\fcharset0 Times-Roman;\f2\froman\fcharset0 Times-Bold;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Bold;\f5\fnil\fcharset0 Menlo-Bold;
\f6\fnil\fcharset0 HelveticaNeue;\f7\fnil\fcharset0 HelveticaNeue-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;
\red57\green192\blue38;\red170\green171\blue37;\red0\green0\blue0;\red202\green51\blue35;\red22\green113\blue60;
\red227\green233\blue230;\red47\green62\blue70;\red242\green245\blue247;}
{\*\expandedcolortbl;;\csgray\c0;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;
\cssrgb\c25706\c77963\c19557;\cssrgb\c72331\c71682\c18599;\cssrgb\c0\c0\c0\c90196;\cssrgb\c83899\c28663\c18026;\cssrgb\c7059\c50980\c30196;
\cssrgb\c90980\c92941\c92157;\cssrgb\c23922\c30980\c34510;\cssrgb\c96078\c96863\c97647;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1002\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1102\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1202\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1402\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1501\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1502\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1701\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1801\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid1902\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid20}
{\list\listtemplateid21\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2001\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2002\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid21}
{\list\listtemplateid22\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid22}
{\list\listtemplateid23\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid23}
{\list\listtemplateid24\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2302\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid24}
{\list\listtemplateid25\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid2401\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid25}
{\list\listtemplateid26\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid26}
{\list\listtemplateid27\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid27}
{\list\listtemplateid28\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid28}
{\list\listtemplateid29\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid29}
{\list\listtemplateid30\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid2901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid30}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}{\listoverride\listid21\listoverridecount0\ls21}{\listoverride\listid22\listoverridecount0\ls22}{\listoverride\listid23\listoverridecount0\ls23}{\listoverride\listid24\listoverridecount0\ls24}{\listoverride\listid25\listoverridecount0\ls25}{\listoverride\listid26\listoverridecount0\ls26}{\listoverride\listid27\listoverridecount0\ls27}{\listoverride\listid28\listoverridecount0\ls28}{\listoverride\listid29\listoverridecount0\ls29}{\listoverride\listid30\listoverridecount0\ls30}}
\paperw11900\paperh16840\margl1440\margr1440\vieww30040\viewh18340\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\fs32 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 MongoDB is a popular NoSQL database that uses a document-oriented data model. Here are some key features and concepts:\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 1. Document-Oriented:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Data Structure
\f1\b0 : MongoDB stores data in BSON (Binary JSON) format, which allows for the representation of complex data types. Each record is called a document and is stored as a key-value pair.\
\ls1\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Flexibility
\f1\b0 : The schema is dynamic, meaning documents in the same collection can have different fields and structures.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 2. Collections:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Grouping of Documents
\f1\b0 : Documents are organized into collections, which are similar to tables in relational databases. Collections can contain an arbitrary number of documents.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 3. Scalability:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Horizontal Scaling
\f1\b0 : MongoDB supports sharding, which allows data to be distributed across multiple servers. This enables scaling out by adding more machines as needed.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 4. Querying:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Rich Query Language
\f1\b0 : MongoDB provides a powerful query language that supports CRUD (Create, Read, Update, Delete) operations, filtering, and aggregation. Queries can be made using a variety of criteria, such as field values and document structure.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 5. Indexing:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Performance Optimization
\f1\b0 : MongoDB allows for indexing on any field, improving query performance significantly. It supports various index types, including compound, geospatial, and text indexes.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 6. Aggregation Framework:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Data Processing
\f1\b0 : MongoDB provides an aggregation framework that allows for data processing and transformation using a pipeline approach. This is useful for generating reports and analytics.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 7. ACID Transactions:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Multi-Document Transactions
\f1\b0 : Starting from version 4.0, MongoDB supports multi-document ACID transactions, allowing operations across multiple documents to be executed atomically.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 8. Replication:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 High Availability
\f1\b0 : MongoDB supports replication through replica sets, where data is duplicated across multiple servers. This enhances data availability and provides failover capabilities.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 9. Use Cases:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Flexible Applications
\f1\b0 : MongoDB is commonly used in applications that require rapid iteration, such as web applications, content management systems, real-time analytics, and Internet of Things (IoT) applications.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 10. Ecosystem:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Tools and Integrations
\f1\b0 : MongoDB has a rich ecosystem, including tools like MongoDB Compass (GUI for database management), MongoDB Atlas (cloud database service), and various drivers for programming languages.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Example:\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs32 \cf0 Here's a simple example of how a document might look in MongoDB:\
\pard\pardeftab720\partightenfactor0

\f3\fs34 \cf0 \
\{\
  "_id": "1",\
  "title": "The Great Gatsby",\
  "author": "F. Scott Fitzgerald",\
  "published_year": 1925,\
  "genres": ["Fiction", "Classic"],\
  "available_copies": 3\
\}\
\pard\pardeftab720\sa240\partightenfactor0

\f1\fs32 \cf0 In this example, the document represents a book and is stored in a collection, possibly named "books."\
MongoDB's flexibility and scalability make it a popular choice for modern application development, especially when dealing with large volumes of data and diverse data structures. If you have specific questions or want to delve deeper into any aspect, feel free to ask!\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sa240\partightenfactor0
\cf0 Let\'92s dive deeper into MongoDB, covering more of its architecture, features, data handling, and use cases:\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Architecture\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Components
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls11\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Database
\f1\b0 : A container for collections.\
\ls11\ilvl1
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Collection
\f1\b0 : A group of related documents. Equivalent to a table in a relational database.\
\ls11\ilvl1
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Document
\f1\b0 : The individual records in a collection, stored in BSON format.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 BSON
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls11\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB uses BSON, a binary representation of JSON-like documents. It supports additional data types (like 
\f3\fs34 Date
\f1\fs32 , 
\f3\fs34 Binary
\f1\fs32 , etc.) that JSON does not, allowing for more complex data structures.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Replica Sets
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls11\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A replica set is a group of MongoDB servers that maintain the same data set. One server is the primary, and the others are secondaries. Data written to the primary is replicated to the secondaries.\
\ls11\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 This provides redundancy and ensures high availability.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls11\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Sharding
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls11\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Sharding is the process of splitting data across multiple servers to handle large datasets. Each shard is a subset of the data.\
\ls11\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 This allows MongoDB to scale horizontally, improving performance and storage capacity.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Features\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Dynamic Schema
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 You can add new fields to documents without impacting existing documents, making it easier to evolve your data model.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Indexes
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB supports various types of indexes (single field, compound, multikey, text, geospatial) to enhance query performance.\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Indexes can be created on any field to speed up searches.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Aggregation Framework
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 The aggregation framework allows for operations like filtering, grouping, and transforming data using a pipeline.\
\ls12\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example stages include 
\f3\fs34 $match
\f1\fs32 , 
\f3\fs34 $group
\f1\fs32 , 
\f3\fs34 $sort
\f1\fs32 , 
\f3\fs34 $project
\f1\fs32 , and 
\f3\fs34 $lookup
\f1\fs32 .\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Transactions
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Multi-document ACID transactions are supported, allowing multiple operations to be executed atomically across multiple documents and collections.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Change Streams
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Change streams allow applications to access real-time data changes without the complexity and risk of tailing the oplog.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls12\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 GridFS
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls12\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A specification for storing and retrieving large files (greater than 16MB) within MongoDB, such as images or videos. It breaks files into smaller chunks and stores them as documents.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Query Language\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\f1\b0\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB uses a rich query language for performing CRUD operations.\
\ls13\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Examples
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls13\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Find
\f1\b0 : To retrieve documents.
\f3\fs34 javascript\uc0\u8232 \u8232 db.books.find(\{ author: "F. Scott Fitzgerald" \})\
\ls13\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 	
\f1\fs32 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 \
\ls13\ilvl1
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Insert
\f1\b0 : To add a document.
\f3\fs34 javascript\uc0\u8232 \u8232 db.books.insertOne(\{ title: "1984", author: "George Orwell", published_year: 1949 \})\
\ls13\ilvl1
\f1\fs32 \
\ls13\ilvl1
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Update
\f1\b0 : To modify documents.
\f3\fs34 javascript\uc0\u8232 \u8232 db.books.updateOne(\{ title: "1984" \}, \{ $set: \{ available_copies: 5 \} \})\
\ls13\ilvl1
\f1\fs32 \
\ls13\ilvl1
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Delete
\f1\b0 : To remove documents.
\f3\fs34 javascript\uc0\u8232 \u8232 db.books.deleteOne(\{ title: "1984" \})\
\uc0\u8232 
\f1\fs32 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Use Cases\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Content Management Systems (CMS)
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Ideal for managing and storing various types of content, such as articles, images, and user-generated content.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Real-Time Analytics
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Suitable for applications that require fast data ingestion and real-time analytics, like tracking user interactions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Internet of Things (IoT)
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Great for handling diverse data from IoT devices where the structure of the data might change over time.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Mobile Applications
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Supports mobile apps that need to handle varying data types and scales dynamically based on user growth.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls14\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 E-commerce Platforms
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls14\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Efficiently manages product catalogs, user profiles, orders, and transaction histories.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Tools and Ecosystem\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB Atlas
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls15\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A fully managed cloud database service that simplifies deployment, scaling, and management.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB Compass
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls15\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 A graphical user interface for MongoDB, allowing users to visualize data, run queries, and optimize database performance.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Drivers
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls15\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB provides drivers for various programming languages (Node.js, Python, Java, C#, etc.) for easy integration with applications.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls15\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Community and Enterprise Support
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls15\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 MongoDB offers community support through forums and documentation, as well as enterprise support with additional features like security and monitoring.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Best Practices\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls16\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Schema Design
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls16\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Plan your schema according to your application's access patterns to optimize performance.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls16\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Indexing
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls16\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Use indexes judiciously to improve query performance, but avoid over-indexing as it can slow down write operations.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls16\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Data Model
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls16\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Use embedded documents for relationships when data is frequently accessed together, and references when dealing with large data sets or many-to-many relationships.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls16\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Backup and Monitoring
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls16\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Regularly back up your data and monitor database performance to avoid issues and ensure high availability.\
\pard\pardeftab720\sa240\partightenfactor0
\cf0 MongoDB is a powerful database solution that excels in scenarios requiring flexibility and scalability. If you have any specific areas you\'92d like to explore further, let me know!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f1\fs24 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 \
\pard\pardeftab720\sa240\partightenfactor0

\fs34 \cf0 In MongoDB, querying is the process of retrieving data from collections based on specified criteria. MongoDB uses a rich and flexible query language that allows for various types of queries. Here's a breakdown of how queries work in MongoDB, along with examples and explanations:\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs38 \cf0 1. Basic Structure of a Query\
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs34 \cf0 A MongoDB query typically involves the following components:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Collection
\f1\b0 : The collection you want to query.\
\ls17\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Query Filter
\f1\b0 : A document that specifies the criteria for selecting documents.\
\ls17\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Projection
\f1\b0  (optional): A document that specifies which fields to include or exclude in the result set.\
\ls17\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Options
\f1\b0  (optional): Additional options to modify the behavior of the query, such as sorting and limiting results.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
\
\pard\pardeftab720\sa240\partightenfactor0

\f1\fs32 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 In MongoDB, various terms, functions, conditions, and operators are used for querying and manipulating data. Here\'92s a comprehensive list:\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 Terms\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Document
\f1\b0 : A record in a collection, stored in BSON format. Documents are analogous to rows in relational databases.\
\ls18\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Collection
\f1\b0 : A group of related documents, similar to a table in relational databases.\
\ls18\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Database
\f1\b0 : A container for collections. A single MongoDB server can host multiple databases.\
\ls18\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Cursor
\f1\b0 : An object that allows iteration over the result set of a query.\
\ls18\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Schema
\f1\b0 : The structure that defines the organization of data within a collection. MongoDB uses a flexible schema.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 Query Functions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0
\f4\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 find()
\f1\b0\fs32 : Retrieves documents from a collection based on specified criteria.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 insertOne()
\f1\b0\fs32 : Inserts a single document into a collection.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 insertMany()
\f1\b0\fs32 : Inserts multiple documents into a collection.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 updateOne()
\f1\b0\fs32 : Updates a single document that matches the specified criteria.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 updateMany()
\f1\b0\fs32 : Updates multiple documents that match the specified criteria.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 deleteOne()
\f1\b0\fs32 : Deletes a single document that matches the specified criteria.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	7	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 deleteMany()
\f1\b0\fs32 : Deletes multiple documents that match the specified criteria.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	8	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 aggregate()
\f1\b0\fs32 : Performs aggregation operations on documents, allowing for filtering, grouping, and transforming data.\
\ls19\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	9	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 countDocuments()
\f1\b0\fs32 : Counts the number of documents that match a specified filter.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 \
Query Conditions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Equality
\f1\b0 : Matches documents with specified field values.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ field: value \}
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Comparison
\f1\b0 : Compares field values using comparison operators.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Operators
\f1\b0 : 
\f3\fs34 $eq
\f1\fs32 , 
\f3\fs34 $ne
\f1\fs32 , 
\f3\fs34 $gt
\f1\fs32 , 
\f3\fs34 $gte
\f1\fs32 , 
\f3\fs34 $lt
\f1\fs32 , 
\f3\fs34 $lte
\f1\fs32 \
\ls20\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ age: \{ $gte: 18 \} \}
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Logical Conditions
\f1\b0 : Combines multiple conditions.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Operators
\f1\b0 : 
\f3\fs34 $and
\f1\fs32 , 
\f3\fs34 $or
\f1\fs32 , 
\f3\fs34 $not
\f1\fs32 , 
\f3\fs34 $nor
\f1\fs32 \
\ls20\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ $or: [\{ age: \{ $lt: 18 \} \}, \{ role: "guest" \}] \}
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Element Conditions
\f1\b0 : Checks for the presence of fields or their types.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Operators
\f1\b0 : 
\f3\fs34 $exists
\f1\fs32 , 
\f3\fs34 $type
\f1\fs32 \
\ls20\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ field: \{ $exists: true \} \}
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Array Conditions
\f1\b0 : Queries documents based on array fields.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Operators
\f1\b0 : 
\f3\fs34 $all
\f1\fs32 , 
\f3\fs34 $elemMatch
\f1\fs32 , 
\f3\fs34 $size
\f1\fs32 \
\ls20\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ genres: \{ $all: ["Fiction", "Classic"] \} \}
\f1\fs32 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls20\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Regular Expressions
\f1\b0 : Performs pattern matching on string fields.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls20\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Example: 
\f3\fs34 \{ title: /Great/i \}
\f1\fs32 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 Query Operators\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Comparison Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $eq
\f1\b0\fs32 : Equal to\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $ne
\f1\b0\fs32 : Not equal to\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $gt
\f1\b0\fs32 : Greater than\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $gte
\f1\b0\fs32 : Greater than or equal to\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $lt
\f1\b0\fs32 : Less than\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $lte
\f1\b0\fs32 : Less than or equal to\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Logical Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $and
\f1\b0\fs32 : Matches documents that satisfy all conditions.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $or
\f1\b0\fs32 : Matches documents that satisfy at least one condition.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $not
\f1\b0\fs32 : Inverts the effect of a query expression.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $nor
\f1\b0\fs32 : Matches documents that fail all the specified conditions.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Element Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $exists
\f1\b0\fs32 : Checks if a field exists.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $type
\f1\b0\fs32 : Checks the BSON type of a field.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Array Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $all
\f1\b0\fs32 : Matches arrays containing all specified elements.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $elemMatch
\f1\b0\fs32 : Matches documents that contain an array field with at least one element matching all specified query criteria.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $size
\f1\b0\fs32 : Matches documents with an array field of a specified size.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Evaluation Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $expr
\f1\b0\fs32 : Allows the use of aggregation expressions within the query language.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $regex
\f1\b0\fs32 : Matches documents with string fields that match a specified regular expression.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $text
\f1\b0\fs32 : Performs text search on string fields indexed with a text index.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls21\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	6	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Geospatial Operators
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls21\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $geoWithin
\f1\b0\fs32 : Matches documents with geospatial data that fall within a specified geometry.\
\ls21\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $near
\f1\b0\fs32 : Finds documents in proximity to a specified point.
\fs24 \
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs28 \cf0 \strokec3 \

\fs36 Additional Terms\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls22\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Index
\f1\b0 : A data structure that improves the speed of data retrieval operations on a database table at the cost of additional space and slower writes.\
\ls22\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Replica Set
\f1\b0 : A group of MongoDB servers that maintain the same data set, providing redundancy and high availability.\
\ls22\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Sharded Cluster
\f1\b0 : A MongoDB deployment that consists of multiple shards, which distribute data across multiple servers to support horizontal scaling.\
\ls22\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Pipeline
\f1\b0 : A sequence of data processing stages in an aggregation operation, where each stage transforms the data as it passes through.\
\ls22\ilvl0
\f2\b \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Projection
\f1\b0 : A way to specify which fields to include or exclude in the query results.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 \
Additional Query Functions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls23\ilvl0
\f4\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 findOne()
\f1\b0\fs32 : Retrieves a single document from a collection. Returns the first matching document.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}
\f4\b\fs34 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 distinct()
\f1\b0\fs32 : Returns an array of distinct values for a specified field from a collection.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}
\f4\b\fs34 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 bulkWrite()
\f1\b0\fs32 : Performs multiple write operations (insert, update, delete) in a single call for improved performance.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4	}
\f4\b\fs34 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 drop()
\f1\b0\fs32 : Removes an entire collection from the database.\
\ls23\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5	}
\f4\b\fs34 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 createIndex()
\f1\b0\fs32 : Creates an index on a specified field or fields to improve query performance.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 \
Additional Query Conditions\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls24\ilvl0
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Aggregation Conditions
\f1\b0 : Used in the aggregation framework to filter documents at various stages.\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls24\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $match
\f1\b0\fs32 : Filters documents based on specified criteria.\
\ls24\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $project
\f1\b0\fs32 : Reshapes each document in the stream, allowing you to include or exclude fields.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls24\ilvl0
\f2\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Geospatial Conditions
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls24\ilvl1
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $geoIntersects
\f1\b0\fs32 : Matches documents with geospatial data that intersects a specified geometry.\
\ls24\ilvl1
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u9702 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $nearSphere
\f1\b0\fs32 : Finds documents near a specified point in a spherical coordinate system.\
\pard\pardeftab720\sa280\partightenfactor0

\f2\b\fs36 \cf0 \strokec3 Additional Query Operators\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls25\ilvl0
\fs32 \cf0 \strokec3 1. Array Operators
\f1\b0 :\
   
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \'95\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $elemMatch
\f1\b0\fs32 : Matches documents that contain an array field with at least one element matching all specified query criteria.
\f0\fs30 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \
\pard\pardeftab720\sa240\partightenfactor0

\f2\b\fs32 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 2. Bitwise Operators
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls26\ilvl0
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $bitsAllClear
\f1\b0\fs32 : Matches documents where the specified field\'92s bitwise representation is all clear (0).\
\ls26\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $bitsAllSet
\f1\b0\fs32 : Matches documents where the specified field\'92s bitwise representation is all set (1).\
\ls26\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $bitsAnyClear
\f1\b0\fs32 : Matches documents where any of the specified bits are clear.\
\ls26\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $bitsAnySet
\f1\b0\fs32 : Matches documents where any of the specified bits are set.\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b \cf0 \strokec3 3. Aggregation Operators
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls27\ilvl0
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $group
\f1\b0\fs32 : Groups documents by specified fields and performs aggregations on them (like sum, avg, etc.).\
\ls27\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $sort
\f1\b0\fs32 : Sorts documents based on specified fields.\
\ls27\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $limit
\f1\b0\fs32 : Limits the number of documents passed to the next stage in the pipeline.\
\ls27\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $lookup
\f1\b0\fs32 : Performs a left outer join with another collection to filter in documents from the "joined" collection.\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b \cf0 \strokec3 4. Set Operators
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls28\ilvl0
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $unionWith
\f1\b0\fs32 : Combines the results of two collections into a single result set.\
\ls28\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $set
\f1\b0\fs32 : Adds new fields or updates existing fields in documents.\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b \cf0 \strokec3 5. Conditional Operators
\f1\b0 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls29\ilvl0
\f4\b\fs34 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $cond
\f1\b0\fs32 : A ternary operator that returns one of two values based on a specified condition.\
\ls29\ilvl0
\f4\b\fs34 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 $ifNull
\f1\b0\fs32 : Returns the first non-null value from the specified values.\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f5\b\fs28 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 Question 1	:
\f0\b0\fs24 \
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \expnd0\expndtw0\kerning0
\CocoaLigature1 \outl0\strokewidth0 \strokec3 \
// Use the library database\
use library;\
\
// Create collections: books, authors, orders, and customers\
\
// Books Collection\
db.books.insertMany([\
    \{ title: "The Great Gatsby", author: "F. Scott Fitzgerald", published_year: 1925, genres: ["Fiction", "Classic"], available_copies: 3, location: \{ type: "Point", coordinates: [-73.97, 40.77] \} \},\
    \{ title: "1984", author: "George Orwell", published_year: 1949, genres: ["Fiction", "Dystopian"], available_copies: 5, location: \{ type: "Point", coordinates: [-73.96, 40.78] \} \},\
    \{ title: "To Kill a Mockingbird", author: "Harper Lee", published_year: 1960, genres: ["Fiction", "Classic"], available_copies: 0, location: \{ type: "Point", coordinates: [-73.95, 40.79] \} \},\
    \{ title: "Moby-Dick", author: "Herman Melville", published_year: 1851, genres: ["Fiction", "Adventure"], available_copies: 2, location: \{ type: "Point", coordinates: [-73.94, 40.80] \} \},\
    \{ title: "War and Peace", author: "Leo Tolstoy", published_year: 1869, genres: ["Fiction", "Historical"], available_copies: 1, location: \{ type: "Point", coordinates: [-73.93, 40.81] \} \},\
    \{ title: "The Catcher in the Rye", author: "J.D. Salinger", published_year: 1951, genres: ["Fiction", "Classic"], available_copies: 4, location: \{ type: "Point", coordinates: [-73.92, 40.82] \} \}\
]);\
\
// Authors Collection\
db.authors.insertMany([\
    \{ name: "F. Scott Fitzgerald", birth_year: 1896, nationality: "American" \},\
    \{ name: "George Orwell", birth_year: 1903, nationality: "British" \},\
    \{ name: "Harper Lee", birth_year: 1926, nationality: "American" \},\
    \{ name: "Herman Melville", birth_year: 1819, nationality: "American" \},\
    \{ name: "Leo Tolstoy", birth_year: 1828, nationality: "Russian" \},\
    \{ name: "J.D. Salinger", birth_year: 1919, nationality: "American" \}\
]);\
\
// Orders Collection\
db.orders.insertMany([\
    \{ order_id: 1, customer_id: 1, book_title: "1984", order_date: new Date("2023-09-01"), quantity: 1 \},\
    \{ order_id: 2, customer_id: 2, book_title: "The Great Gatsby", order_date: new Date("2023-09-02"), quantity: 2 \},\
    \{ order_id: 3, customer_id: 1, book_title: "To Kill a Mockingbird", order_date: new Date("2023-09-03"), quantity: 1 \}\
]);\
\
// Customers Collection\
db.customers.insertMany([\
    \{ customer_id: 1, name: "Alice", email: "alice@example.com" \},\
    \{ customer_id: 2, name: "Bob", email: "bob@example.com" \}\
]);\
\
// Query 1: Find all books\
// This query retrieves all documents in the books collection.\
db.books.find();\
// Explanation: The `find()` method with no parameters returns all documents in the collection. MongoDB scans the entire collection and retrieves each document.\
\
\
// Query 2: Find books by a specific author\
// This query retrieves books by "F. Scott Fitzgerald".\
db.books.find(\{ author: "F. Scott Fitzgerald" \});\
// Explanation: The query filters documents based on the `author` field, returning only those documents where the author matches "F. Scott Fitzgerald".\
\
\
// Query 3: Find books published after 2000\
// This query retrieves books that were published after the year 2000.\
db.books.find(\{ published_year: \{ $gt: 2000 \} \});\
// Explanation: The query uses the `$gt` operator to compare the `published_year` field, returning documents where the year is greater than 2000.\
\
\
// Query 4: Find books with available copies\
// This query retrieves books that have more than 0 available copies.\
db.books.find(\{ available_copies: \{ $gt: 0 \} \});\
// Explanation: This query checks the `available_copies` field with the `$gt` operator, filtering out books that are not available.\
\
\
 // Query 5: Find books with titles containing "The"\
// This query retrieves books where the title contains the substring "The".\
db.books.find(\{ title: /The/i \});\
// Explanation: The query uses a regular expression to match titles containing "The", ignoring case sensitivity due to the `/i` flag.\
\
\
 // Query 6: Update the number of available copies for a specific book\
// This query updates the `available_copies` for the book "1984" to 10.\
db.books.updateOne(\{ title: "1984" \}, \{ $set: \{ available_copies: 10 \} \});\
// Explanation: The `updateOne()` method finds the first document that matches the filter (`title: "1984"`) and sets `available_copies` to 10.\
\
\
 // Query 7: Increment available copies for "The Great Gatsby"\
// This query increments the `available_copies` of "The Great Gatsby" by 1.\
db.books.updateOne(\{ title: "The Great Gatsby" \}, \{ $inc: \{ available_copies: 1 \} \});\
// Explanation: The `$inc` operator increases the value of `available_copies` by 1 for the matching document.\
\
\
 // Query 8: Delete a book from the collection\
// This query deletes the book titled "War and Peace".\
db.books.deleteOne(\{ title: "War and Peace" \});\
// Explanation: The `deleteOne()` method finds the first matching document based on the filter and removes it from the collection.\
\
\
 // Query 9: Find books sorted by published year in descending order\
// This query retrieves books sorted by `published_year` in descending order.\
db.books.find().sort(\{ published_year: -1 \});\
// Explanation: The `sort()` method orders the results based on `published_year`, where `-1` indicates descending order.\
\
\
 // Query 10: Limit the results to the first 3 documents\
// This query retrieves only the first 3 books from the collection.\
db.books.find().limit(3);\
// Explanation: The `limit()` method restricts the number of documents returned to 3, regardless of how many documents are in the collection.\
\
\
 // Query 11: Skip the first 2 documents and return the next 2\
// This query skips the first 2 books and returns the next 2.\
db.books.find().skip(2).limit(2);\
// Explanation: The `skip()` method ignores the first 2 documents, and the `limit()` method restricts the results to the next 2 documents.\
\
\
 // Query 12: Aggregate to count the number of books by each author\
// This query counts how many books each author has written.\
db.books.aggregate([\
    \{ $group: \{ _id: "$author", count: \{ $sum: 1 \} \} \}\
]);\
// Explanation: The `aggregate()` method groups documents by the `author` field and counts the number of books for each author using `$sum`.\
\
\
 // Query 13: Use distinct to get unique authors\
// This query retrieves a list of unique authors from the books collection.\
db.books.distinct("author");\
// Explanation: The `distinct()` method returns an array of unique values for the specified field, in this case, `author`.\
\
\
 // Query 14: Create an index on the author field\
// This query creates an index on the `author` field to improve query performance.\
db.books.createIndex(\{ author: 1 \});\
// Explanation: The `createIndex()` method builds an index on the specified field (`author`), which helps speed up queries filtering by this field.\
\
\
 // Query 15: Find documents near a specific location using geospatial data\
// This query retrieves books that are near a specific geographic point.\
db.books.find(\{\
    location: \{\
        $near: \{\
            $geometry: \{\
                type: "Point",\
                coordinates: [-73.97, 40.77]\
            \},\
            $maxDistance: 500 // 500 meters\
        \}\
    \}\
\});\
// Explanation: The query uses the `$near` operator to find documents with a `location` field within 500 meters of the specified coordinates.\
\
\
 // Query 16: Use the $lookup operator to join two collections\
// This query performs a left outer join between the orders and customers collections.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",        // Collection to join\
            localField: "customer_id", // Field from the orders collection\
            foreignField: "customer_id", // Field from the customers collection\
            as: "customer_info"       // Output array field\
        \}\
    \}\
]);\
// Explanation: The `$lookup` operator joins the `orders` collection with the `customers` collection based on matching `customer_id` fields, adding customer information to each order document in the `customer_info` field.\
\
\
 // Query 17: Update multiple documents based on a condition\
// This query updates all books published before 1950 to have 1 available copy.\
db.books.updateMany(\{ published_year: \{ $lt: 1950 \} \}, \{ $set: \{ available_copies: 1 \} \});\
// Explanation: The `updateMany()` method finds all documents matching the filter and sets `available_copies` to 1 for each matching document.\
\
\
 // Query 18: Find books by multiple criteria using $or\
// This query finds books that are either by "Harper Lee" or published before 1950.\
db.books.find(\{\
    $or: [\
        \{ author: "Harper Lee" \},\
        \{ published_year: \{ $lt: 1950 \} \}\
    ]\
\});\
// Explanation: The `$or` operator combines multiple conditions, returning documents that satisfy at least one of the specified criteria.\
\
\
 // Query 19: Use the $cond operator in aggregation\
// This query adds a field to indicate if a book is available or not.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            available_status: \{\
                $cond: \{ if: \{ $gt: ["$available_copies", 0] \}, then: "Available", else: "Not Available" \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$project` stage reshapes each document, adding a new field `available_status` that indicates if the book is available based on the `available_copies` field.\
\
\
 // Query 20: Find customers who ordered more than once\
// This query groups orders by customer and counts the number of orders for each customer.\
db.orders.aggregate([\
    \{\
        $group: \{\
            _id: "$customer_id",\
            order_count: \{ $sum: 1 \}\
        \}\
    \},\
    \{\
        $match: \{ order_count: \{ $gt: 1 \} \}\
    \}\
]);\
// Explanation: The first `$group` stage aggregates orders by `customer_id` and counts them. The second `$match` stage filters the results to include only customers with more than one order.\
\

\f0\fs26 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \outl0\strokewidth0 \

\f5\b\fs32 Question 2 :
\f0\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
// Additional Terms, Functions, Conditions, and Operators in MongoDB\
\
// Query 21: Find books with a specific genre\
// This query retrieves all books that belong to the genre "Classic".\
db.books.find(\{ genres: "Classic" \});\
// Explanation: The query checks the `genres` field to find documents where "Classic" is one of the elements in the array.\
\
\
 // Query 22: Find books with multiple genres\
// This query retrieves books that contain both "Fiction" and "Classic" in their genres.\
db.books.find(\{ genres: \{ $all: ["Fiction", "Classic"] \} \});\
// Explanation: The `$all` operator checks that all specified elements exist in the `genres` array, returning only those documents that meet this condition.\
\
\
 // Query 23: Use $elemMatch to find books with complex criteria\
// This query retrieves books with a specific condition in a nested array.\
// Assuming we modify our books collection to include reviews.\
db.books.insertOne(\{\
    title: "New Book",\
    author: "Author Name",\
    reviews: [\
        \{ reviewer: "Alice", rating: 5 \},\
        \{ reviewer: "Bob", rating: 3 \}\
    ]\
\});\
db.books.find(\{\
    reviews: \{\
        $elemMatch: \{\
            reviewer: "Alice",\
            rating: \{ $gte: 4 \}\
        \}\
    \}\
\});\
// Explanation: The `$elemMatch` operator allows for matching array elements that satisfy all specified conditions. Here, it finds books reviewed by "Alice" with a rating of 4 or higher.\
\
\
 // Query 24: Count the total number of books in the collection\
// This query counts all the documents in the books collection.\
db.books.countDocuments();\
// Explanation: The `countDocuments()` method returns the total number of documents in the collection. It efficiently counts documents without retrieving them.\
\
\
 // Query 25: Use $lookup to join orders and customers with additional filtering\
// This query performs a left outer join and filters the results to include only customers with orders.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",\
            localField: "customer_id",\
            foreignField: "customer_id",\
            as: "customer_info"\
        \}\
    \},\
    \{\
        $match: \{ "customer_info": \{ $ne: [] \} \} // Filter to only include orders with customer information\
    \}\
]);\
// Explanation: The first stage uses `$lookup` to join the `orders` and `customers` collections. The second stage filters out orders where there is no associated customer information.\
\
\
 // Query 26: Use $group to calculate the average rating of books\
// This query calculates the average rating for books, assuming we have a `ratings` field.\
db.books.insertMany([\
    \{ title: "Book A", ratings: [5, 4, 3] \},\
    \{ title: "Book B", ratings: [4, 5] \},\
    \{ title: "Book C", ratings: [3, 3, 2] \}\
]);\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            avg_rating: \{ $avg: "$ratings" \} // Calculate average rating\
        \}\
    \}\
]);\
// Explanation: The `$project` stage reshapes each document, adding an `avg_rating` field that contains the average of the `ratings` array.\
\
\
 // Query 27: Use $unwind to flatten an array\
// This query unwinds the genres array to return a document for each genre.\
db.books.aggregate([\
    \{ $unwind: "$genres" \},\
    \{ $group: \{ _id: "$genres", count: \{ $sum: 1 \} \} \} // Count books per genre\
]);\
// Explanation: The `$unwind` stage deconstructs the `genres` array, creating separate documents for each genre. The subsequent `$group` stage counts how many books belong to each genre.\
\
\
 // Query 28: Use $sort and $limit in an aggregation pipeline\
// This query retrieves the top 3 most recent books.\
db.books.aggregate([\
    \{ $sort: \{ published_year: -1 \} \}, // Sort by published_year in descending order\
    \{ $limit: 3 \}\
]);\
// Explanation: The `$sort` stage orders the documents by `published_year`, and the `$limit` stage restricts the results to the top 3 most recent books.\
\
\
 // Query 29: Use $addFields to add new fields to documents\
// This query adds a new field `is_classic` to indicate if a book is a classic.\
db.books.aggregate([\
    \{\
        $addFields: \{\
            is_classic: \{ $lt: ["$published_year", 1970] \} // Classic if published before 1970\
        \}\
    \}\
]);\
// Explanation: The `$addFields` stage adds a new field `is_classic`, which is true if `published_year` is less than 1970.\
\
\
 // Query 30: Find books with non-null available_copies\
// This query retrieves books where `available_copies` exists and is not null.\
db.books.find(\{ available_copies: \{ $exists: true, $ne: null \} \});\
// Explanation: The `$exists` operator checks if the field `available_copies` exists, while `$ne` ensures it is not equal to `null`, filtering out books without available copies.\
\
\
 // Query 31: Find documents that contain an array with a specific size\
// This query retrieves books that have exactly 2 genres.\
db.books.find(\{ genres: \{ $size: 2 \} \});\
// Explanation: The `$size` operator checks the length of the `genres` array, returning only those documents where the array has exactly 2 elements.\
\
\
 // Query 32: Use $merge to save aggregation results to a new collection\
// This query saves the results of the aggregation to a new collection called `popular_books`.\
db.books.aggregate([\
    \{ $match: \{ available_copies: \{ $gt: 0 \} \} \},\
    \{ $merge: \{ into: "popular_books" \} \}\
]);\
// Explanation: The `$merge` stage allows the results of an aggregation to be saved to a specified collection (`popular_books`). It can insert new documents or update existing ones.\
\
\
 // Query 33: Use $facet for multiple aggregations in one query\
// This query retrieves the count of available books and the average published year in parallel.\
db.books.aggregate([\
    \{\
        $facet: \{\
            available_count: [\
                \{ $match: \{ available_copies: \{ $gt: 0 \} \} \},\
                \{ $count: "count" \}\
            ],\
            average_year: [\
                \{ $group: \{ _id: null, avg_year: \{ $avg: "$published_year" \} \} \}\
            ]\
        \}\
    \}\
]);\
// Explanation: The `$facet` stage allows multiple aggregation pipelines to run simultaneously on the same input. Here, it calculates both the count of available books and the average published year.\
\
\
 // Query 34: Use $sample to get random documents\
// This query retrieves 2 random books from the collection.\
db.books.aggregate([\{ $sample: \{ size: 2 \} \}]);\
// Explanation: The `$sample` stage randomly selects the specified number of documents (`size: 2`) from the collection.\
\
\
 // Query 35: Use $replaceRoot to reshape documents\
// This query replaces the root document with a specific field's value.\
db.books.aggregate([\
    \{\
        $replaceRoot: \{ newRoot: \{ title: "$title", author: "$author" \} \}\
    \}\
]);\
// Explanation: The `$replaceRoot` stage replaces the input document with the specified field's value, reshaping the document structure to include only `title` and `author`.\
\
\
 // Query 36: Use $setUnion to find unique genres across books\
// This query retrieves a unique set of genres from all books.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: null,\
            all_genres: \{ $addToSet: "$genres" \}\
        \}\
    \},\
    \{\
        $project: \{\
            unique_genres: \{ $reduce: \{\
                input: "$all_genres",\
                initialValue: [],\
                in: \{ $setUnion: ["$$value", "$$this"] \}\
            \}\}\
        \}\
    \}\
]);\
// Explanation: The first `$group` stage collects all genres from the `genres` arrays into an array. The second stage uses `$reduce` and `$setUnion` to create a unique set of genres.\
\
\
 // Query 37: Find books with complex conditions using $not\
// This query retrieves books that do not belong to the genre "Classic".\
db.books.find(\{ genres: \{ $not: \{ $elemMatch: \{ $eq: "Classic" \} \} \} \});\
// Explanation: The `$not` operator negates the effect of the query, returning documents where "Classic" is not an element in the `genres` array.\
\
\
 // Query 38: Use $arrayElemAt to access specific array elements\
// This query retrieves the first genre of each book.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            first_genre: \{ $arrayElemAt: ["$genres", 0] \} // Access the first genre\
        \}\
    \}\
]);\
// Explanation: The `$arrayElemAt` operator retrieves the element at the specified index (0 for the first element) from the `genres` array.\
\
\
 // Query 39: Use $mergeObjects to combine two documents\
// This query combines two objects within the same document.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            author: 1,\
            additional_info: \{\
                $mergeObjects: [\
                    \{ year: "$published_year" \},\
                    \{ copies: "$available_copies" \}\
                ]\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$mergeObjects` operator combines two or more objects into a single object, allowing for easier access to multiple fields in the document.\
\
\
 // Query 40: Use $ifNull to provide default values\
// This query retrieves books and replaces null `available_copies` with 0.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            available_copies: \{ $ifNull: ["$available_copies", 0] \} // Replace null with 0\
        \}\
    \}\
]);\
// Explanation: The `$ifNull` operator checks if `available_copies` is null and replaces it with 0 if it is, allowing for cleaner output.\
\
\
Question 3 :\
\
// Additional MongoDB Queries and Explanations\
\
// Query 41: Use $sort with multiple fields\
// This query retrieves all books sorted by author name and then by published year.\
db.books.find().sort(\{ author: 1, published_year: -1 \});\
// Explanation: The `sort()` method sorts the results first by `author` in ascending order (`1`) and then by `published_year` in descending order (`-1`). This means that if two books have the same author, they will be sorted by their published year, with the most recent first.\
\
\
// Query 42: Use $geoWithin to find books within a specific area\
// This query finds books located within a defined polygon.\
db.books.find(\{\
    location: \{\
        $geoWithin: \{\
            $geometry: \{\
                type: "Polygon",\
                coordinates: [[\
                    [-73.97, 40.77],\
                    [-73.95, 40.78],\
                    [-73.96, 40.79],\
                    [-73.97, 40.77]\
                ]]\
            \}\
        \}\
    \}\
\});\
// Explanation: The `$geoWithin` operator finds documents with a `location` field that falls within the specified geographic polygon. In this case, it checks if the `coordinates` are within the defined polygon.\
\
\
 // Query 43: Use $expr to compare fields within the same document\
// This query retrieves books where the number of available copies is less than the published year.\
db.books.find(\{\
    $expr: \{\
        $lt: ["$available_copies", "$published_year"]\
    \}\
\});\
// Explanation: The `$expr` operator allows the use of aggregation expressions within the query language. Here, it checks if `available_copies` is less than `published_year` for each document.\
\
\
 // Query 44: Use $currentDate to set the current date in a document\
// This query updates a book's document to include the last updated date.\
db.books.updateOne(\
    \{ title: "1984" \},\
    \{ $currentDate: \{ lastUpdated: true \} \}\
);\
// Explanation: The `$currentDate` operator sets the `lastUpdated` field to the current date and time for the matching document. This can be useful for tracking changes.\
\
\
 // Query 45: Use $count to get the number of documents in an aggregation pipeline\
// This query counts the total number of books.\
db.books.aggregate([\
    \{ $count: "total_books" \}\
]);\
// Explanation: The `$count` stage in the aggregation pipeline counts the number of documents that pass through it and returns the result as a document containing the specified field name.\
\
\
 // Query 46: Use $toUpper to convert text to uppercase\
// This query retrieves all book titles in uppercase.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: \{ $toUpper: "$title" \} // Convert title to uppercase\
        \}\
    \}\
]);\
// Explanation: The `$toUpper` operator converts the `title` field to uppercase for each document in the results.\
\
\
 // Query 47: Use $dateToString to format dates\
// This query formats the published year as a string in a specific format.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            published_year: \{\
                $dateToString: \{\
                    format: "%Y",\
                    date: \{ $dateFromString: \{ dateString: \{ $toString: "$published_year" \} \} \}\
                \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$dateToString` operator formats a date as a string according to the specified format. In this case, it converts the `published_year` to a string in "YYYY" format.\
\
\
 // Query 48: Use $arrayToObject to convert arrays to objects\
// This query converts an array of key-value pairs into an object.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            keyValuePairs: [\
                \{ k: "available", v: "$available_copies" \},\
                \{ k: "year", v: "$published_year" \}\
            ],\
            asObject: \{ $arrayToObject: "$keyValuePairs" \} // Convert to object\
        \}\
    \}\
]);\
// Explanation: The `$arrayToObject` operator takes an array of key-value pairs and converts it into a single object. This allows for easier access to the data.\
\
\
 // Query 49: Use $filter to return specific array elements\
// This query retrieves books with genres filtered to include only those that contain "Fiction".\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            filtered_genres: \{\
                $filter: \{\
                    input: "$genres",\
                    as: "genre",\
                    cond: \{ $eq: ["$$genre", "Fiction"] \}\
                \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$filter` operator allows filtering an array to return only those elements that match the specified condition. In this case, it returns only the genres that are "Fiction".\
\
\
 // Query 50: Use $lookup with a pipeline for more complex joins\
// This query retrieves orders and includes customer information with additional conditions.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",\
            let: \{ customerId: "$customer_id" \},\
            pipeline: [\
                \{ $match: \{ $expr: \{ $eq: ["$customer_id", "$$customerId"] \} \} \},\
                \{ $project: \{ name: 1, email: 1 \} \}\
            ],\
            as: "customer_info"\
        \}\
    \}\
]);\
// Explanation: The `$lookup` operator with a pipeline allows for more complex queries. It matches documents in the `customers` collection based on the `customer_id`, including only specific fields in the output.\
\
\
 // Query 51: Use $add to perform arithmetic operations\
// This query calculates the total copies of all books available.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: null,\
            total_copies: \{ $sum: "$available_copies" \}\
        \}\
    \}\
]);\
// Explanation: The `$sum` operator within the `$group` stage calculates the total of the `available_copies` field for all documents, giving the overall count of copies available.\
\
\
 // Query 52: Use $reduce to combine values in an array\
// This query sums the ratings of each book.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            total_rating: \{\
                $reduce: \{\
                    input: "$ratings",\
                    initialValue: 0,\
                    in: \{ $add: ["$$value", "$$this"] \}\
                \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$reduce` operator iterates over the `ratings` array, adding each value to an `initialValue` of 0, effectively summing the ratings.\
\
\
 // Query 53: Use $push to create an array of specific fields\
// This query groups books by author and creates an array of their titles.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: "$author",\
            titles: \{ $push: "$title" \}\
        \}\
    \}\
]);\
// Explanation: The `$push` operator collects the `title` of each book into an array grouped by the `author`, resulting in a list of all books written by each author.\
\
\
 // Query 54: Use $cond for conditional logic\
// This query indicates if a book is a classic or not based on the published year.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            is_classic: \{\
                $cond: \{\
                    if: \{ $lt: ["$published_year", 1970] \},\
                    then: true,\
                    else: false\
                \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$cond` operator provides conditional logic. It checks if `published_year` is less than 1970 and returns `true` or `false` based on the condition.\
\
\
 // Query 55: Use $sample to retrieve random documents with limits\
// This query retrieves 5 random books from the collection.\
db.books.aggregate([\{ $sample: \{ size: 5 \} \}]);\
// Explanation: The `$sample` operator randomly selects a specified number of documents from the collection. In this case, it fetches 5 random books.\
\
\
 // Query 56: Use $lookup to join with filtering and projection\
// This query retrieves orders with detailed customer information.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",\
            localField: "customer_id",\
            foreignField: "customer_id",\
            as: "customer_info"\
        \}\
    \},\
    \{\
        $unwind: "$customer_info" // Unwind the customer_info array\
    \},\
    \{\
        $project: \{\
            order_id: 1,\
            "customer_info.name": 1,\
            "customer_info.email": 1,\
            book_title: 1\
        \}\
    \}\
]);\
// Explanation: The `$lookup` operator joins the `orders` and `customers` collections, and the `$unwind` operator flattens the `customer_info` array. Finally, `$project` specifies which fields to include in the output.\
\
\
 // Query 57: Use $replaceOne to update a document completely\
// This query replaces the entire document of a book with the title "1984".\
db.books.replaceOne(\
    \{ title: "1984" \},\
    \{\
        title: "1984",\
        author: "George Orwell",\
        published_year: 1949,\
        genres: ["Fiction", "Dystopian"],\
        available_copies: 10\
    \}\
);\
// Explanation: The `replaceOne()` method replaces the entire document that matches the filter with the new specified document. This is useful for complete updates.\
\
\
 // Query 58: Use $setIntersection to find common elements in arrays\
// This query finds books that have both "Fiction" and "Classic" as genres.\
db.books.aggregate([\
    \{\
        $project: \{\
            common_genres: \{\
                $setIntersection: [\
                    "$genres",\
                    ["Fiction", "Classic"]\
                ]\
            \}\
        \}\
    \},\
    \{\
        $match: \{ "common_genres.0": \{ $exists: true \} \} // Match documents that have common genres\
    \}\
]);\
// Explanation: The `$setIntersection` operator finds the intersection of two arrays, returning the common elements. The subsequent `$match` filters to include only documents where there are common genres.\
\
\
 // Query 59: Use $group with multiple aggregations\
// This query calculates the total and average available copies per author.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: "$author",\
            total_copies: \{ $sum: "$available_copies" \},\
            average_copies: \{ $avg: "$available_copies" \}\
        \}\
    \}\
]);\
// Explanation: The `$group` stage calculates both the total and average of `available_copies` for each author, providing insights into their books' availability.\
\
\
 // Query 60: Use $bucket to categorize data\
// This query groups books into buckets based on the published year.\
db.books.aggregate([\
    \{\
        $bucket: \{\
            groupBy: "$published_year",\
            boundaries: [1900, 1950, 1970, 1990, 2010],\
            default: "Other",\
            output: \{\
                count: \{ $sum: 1 \},\
                titles: \{ $push: "$title" \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$bucket` operator categorizes documents into specified ranges (`boundaries`). Here, it counts the number of books published in each range and collects their titles.\
\
Question 4:\
\
// Additional MongoDB Queries and Explanations\
\
// Query 61: Use $text to perform a text search\
// This query retrieves books that contain the word "dystopian" in their description.\
db.books.createIndex(\{ description: "text" \}); // Create a text index on the description field\
db.books.find(\{ $text: \{ $search: "dystopian" \} \});\
// Explanation: The `$text` operator allows for text search on indexed string fields. The query finds documents with the term "dystopian" in the `description` field.\
\
\
 // Query 62: Use $expr for date comparisons\
// This query retrieves books published in the last 10 years.\
db.books.find(\{\
    $expr: \{\
        $gt: ["$published_year", new Date().getFullYear() - 10]\
    \}\
\});\
// Explanation: The `$expr` operator allows you to compare fields and values. Here, it checks if `published_year` is greater than the current year minus 10.\
\
\
 // Query 63: Use $arrayToObject to convert arrays into objects\
// This query converts an array of key-value pairs into an object for each book.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            book_info: \{\
                $arrayToObject: [\
                    \{ k: "available", v: "$available_copies" \},\
                    \{ k: "year", v: "$published_year" \}\
                ]\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$arrayToObject` operator converts an array of key-value pairs into an object, allowing you to access fields as properties.\
\
\
 // Query 64: Use $match to filter data in aggregation\
// This query filters books with more than 5 available copies before performing an aggregation.\
db.books.aggregate([\
    \{ $match: \{ available_copies: \{ $gt: 5 \} \} \},\
    \{ $group: \{ _id: "$author", total: \{ $sum: "$available_copies" \} \} \}\
]);\
// Explanation: The first stage uses `$match` to filter the documents. The second stage groups the remaining documents by `author` and sums their available copies.\
\
\
 // Query 65: Use $add to calculate the total available copies and reserved copies\
// This query calculates the total number of books (available + reserved).\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            total_books: \{ $add: ["$available_copies", "$reserved_copies"] \}\
        \}\
    \}\
]);\
// Explanation: The `$add` operator performs arithmetic addition, summing `available_copies` and `reserved_copies` to get the total number of books.\
\
\
 // Query 66: Use $toLower to convert text to lowercase\
// This query retrieves all book titles in lowercase.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: \{ $toLower: "$title" \} // Convert title to lowercase\
        \}\
    \}\
]);\
// Explanation: The `$toLower` operator converts the `title` field to lowercase for each document in the results.\
\
\
 // Query 67: Use $size to filter documents based on array length\
// This query retrieves books that have more than two genres.\
db.books.find(\{ genres: \{ $size: \{ $gt: 2 \} \} \});\
// Explanation: The `$size` operator returns the number of elements in an array. The query filters documents to include only those with more than two genres.\
\
\
 // Query 68: Use $lookup with multiple stages\
// This query joins orders with customers and books in one pipeline.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",\
            localField: "customer_id",\
            foreignField: "customer_id",\
            as: "customer_info"\
        \}\
    \},\
    \{\
        $unwind: "$customer_info"\
    \},\
    \{\
        $lookup: \{\
            from: "books",\
            localField: "book_id",\
            foreignField: "book_id",\
            as: "book_info"\
        \}\
    \},\
    \{\
        $unwind: "$book_info"\
    \},\
    \{\
        $project: \{\
            "customer_info.name": 1,\
            "book_info.title": 1,\
            order_date: 1\
        \}\
    \}\
]);\
// Explanation: This pipeline performs two lookups, first joining `orders` with `customers`, and then with `books`. The `$unwind` stages flatten the results, and `$project` specifies which fields to include.\
\
\
 // Query 69: Use $regex for pattern matching\
// This query retrieves books with titles that start with "The".\
db.books.find(\{ title: \{ $regex: /^The/, $options: 'i' \} \});\
// Explanation: The `$regex` operator allows for pattern matching. This query uses a regular expression to find titles that start with "The", with the 'i' option for case-insensitivity.\
\
\
 // Query 70: Use $count to count documents in a group\
// This query counts the number of books for each genre.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: "$genres",\
            count: \{ $count: \{\} \}\
        \}\
    \}\
]);\
// Explanation: The `$count` operator counts the number of documents in each group, returning the number of books for each genre.\
\
\
 // Query 71: Use $lookup to join collections with an additional match condition\
// This query retrieves orders and includes only customers with premium memberships.\
db.orders.aggregate([\
    \{\
        $lookup: \{\
            from: "customers",\
            localField: "customer_id",\
            foreignField: "customer_id",\
            as: "customer_info"\
        \}\
    \},\
    \{\
        $unwind: "$customer_info"\
    \},\
    \{\
        $match: \{ "customer_info.membership": "premium" \} // Filter for premium customers\
    \},\
    \{\
        $project: \{\
            order_id: 1,\
            "customer_info.name": 1,\
            "customer_info.email": 1,\
            book_title: 1\
        \}\
    \}\
]);\
// Explanation: This query uses `$lookup` to join `orders` with `customers`, unwinds the result, and then filters to include only those customers with a premium membership.\
\
\
 // Query 72: Use $bucketAuto to create automatic buckets\
// This query creates buckets for the available copies of books automatically.\
db.books.aggregate([\
    \{\
        $bucketAuto: \{\
            groupBy: "$available_copies",\
            buckets: 5 // Divide available copies into 5 buckets\
        \}\
    \}\
]);\
// Explanation: The `$bucketAuto` operator automatically creates buckets based on the specified field, allowing for dynamic categorization based on the data.\
\
\
 // Query 73: Use $project to reshape documents\
// This query reshapes the book documents to include only relevant fields.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            author: 1,\
            available_copies: 1,\
            published_year: 1\
        \}\
    \}\
]);\
// Explanation: The `$project` stage reshapes each document, including only the specified fields (title, author, available_copies, and published_year) in the output.\
\
\
 // Query 74: Use $setUnion to find unique elements across arrays\
// This query finds unique genres across all books.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: null,\
            all_genres: \{ $addToSet: "$genres" \}\
        \}\
    \},\
    \{\
        $project: \{\
            unique_genres: \{ $setUnion: "$all_genres" \}\
        \}\
    \}\
]);\
// Explanation: The `$setUnion` operator is used to create a unique set of genres across all books by combining them from the arrays.\
\
\
 // Query 75: Use $addFields to add new fields to documents\
// This query adds a field that calculates the age of each book.\
db.books.aggregate([\
    \{\
        $addFields: \{\
            book_age: \{ $subtract: [new Date().getFullYear(), "$published_year"] \}\
        \}\
    \}\
]);\
// Explanation: The `$addFields` operator allows you to add new fields to documents. Here, it calculates the `book_age` by subtracting the `published_year` from the current year.\
\
\
 // Query 76: Use $slice to limit the number of elements returned from an array\
// This query retrieves only the first two genres of each book.\
db.books.aggregate([\
    \{\
        $project: \{\
            title: 1,\
            first_two_genres: \{ $slice: ["$genres", 2] \} // Limit to the first two genres\
        \}\
    \}\
]);\
// Explanation: The `$slice` operator limits the number of elements returned from an array. In this case, it returns only the first two elements from the `genres` array.\
\
\
 // Query 77: Use $geoNear to find nearby books based on location\
// This query finds books within a certain distance from a specified point.\
db.books.createIndex(\{ location: "2dsphere" \}); // Ensure there's a 2dsphere index on the location field\
db.books.aggregate([\
    \{\
        $geoNear: \{\
            near: \{ type: "Point", coordinates: [-73.97, 40.77] \},\
            distanceField: "dist.calculated",\
            maxDistance: 1000, // 1000 meters\
            spherical: true,\
            query: \{ available_copies: \{ $gt: 0 \} \} // Only available books\
        \}\
    \}\
]);\
// Explanation: The `$geoNear` operator finds documents near a specified point, calculating the distance to each document. Here, it filters to include only books with available copies.\
\
\
 // Query 78: Use $group with multiple conditions\
// This query groups books by author and counts how many of their books are available or reserved.\
db.books.aggregate([\
    \{\
        $group: \{\
            _id: "$author",\
            available_count: \{\
                $sum: \{ $cond: [\{ $gt: ["$available_copies", 0] \}, 1, 0] \}\
            \},\
            reserved_count: \{\
                $sum: \{ $cond: [\{ $gt: ["$reserved_copies", 0] \}, 1, 0] \}\
            \}\
        \}\
    \}\
]);\
// Explanation: The `$cond` operator is used to conditionally count available and reserved books for each author, providing insight into their book availability.\
\
\
 // Query 79: Use $limit to restrict the number of documents returned\
// This query retrieves the top 10 most recently published books.\
db.books.find().sort(\{ published_year: -1 \}).limit(10);\
// Explanation: The `limit()` method restricts the number of documents returned to 10. The results are sorted by `published_year` in descending order.\
\
\
 // Query 80: Use $merge to write the results of a pipeline to a new collection\
// This query writes the list of available books to a new collection called 'available_books'.\
db.books.aggregate([\
    \{ $match: \{ available_copies: \{ $gt: 0 \} \} \},\
    \{ $merge: \{ into: "available_books", whenMatched: "merge", whenNotMatched: "insert" \} \}\
]);\
// Explanation: The `$merge` operator allows the results of an aggregation pipeline to be written to a new collection. In this case, it saves the available books to the `available_books` collection.\
\
\

\fs
Course Link\
\
   {\field{\*\fldinst{HYPERLINK "https://www.linkedin.com/learning/learning-mongodb-17360744/modern-database-and-application-design-with-mongodb?contextUrn=urn%3Ali%3AlyndaLearningPath%3A62325431498e28d12bf0bd33&u=88123954"}}{\fldrslt https://www.linkedin.com/learning/learning-mongodb-17360744/modern-database-and-application-design-with-mongodb?contextUrn=urn%3Ali%3AlyndaLearningPath%3A62325431498e28d12bf0bd33&u=88123954}}\
\
   Git repo : {\field{\*\fldinst{HYPERLINK "https://github.com/LinkedInLearning/introduction-to-mongodb-4315215"}}{\fldrslt https://github.com/LinkedInLearning/introduction-to-mongodb-4315215}}\
\
1.  brew tap mongodb/brew\
2. brew install mongodb-community@8.0\
3.  To start mongodb/brew/mongodb-community now and restart at login:\
    Cmd: brew services start mongodb/brew/mongodb-community\
4. run below command to use mongodb shell\
   Cmd: mongosh\
\
   4.1 show dbs;\
   4.2 exit \
\
5. Install mongodb-compass for UI\
  Cmd:  brew install --cask mongodb-compass \
5. Go to Application , you will see mongodb-compass.app, double click on that. You will see to add new connection click on that the click on connect. Now you are connected.\
\
6. You can import json from compass or local location\
   \
7. Goto local location : \
   7.1 goto database you have created : /Users/gsingh04/Repos/introduction-to-mongodb-4315215/collections\
       \
   7.2 use below command to import json file.--db==database_name,--jsonArray \'93Json you want to upload\'94\
       Cmd: mongoimport --db=Cooker --jsonArray recipes.json\
\
8. If you want to use mongoldb from commands\
   8.1 run below command to connect mongosh\
       Cmd: mongosh\
   8.2 run below below command to connect to db, Cooker is db\
       Cmd: use Cooker\
\
Question : {\field{\*\fldinst{HYPERLINK "https://www.linkedin.com/learning/learning-mongodb-17360744/how-you-need-to-think-differently?autoSkip=true&contextUrn=urn%3Ali%3AlyndaLearningPath%3A62325431498e28d12bf0bd33&resume=false&u=88123954#"}}{\fldrslt 
\f6\fs24 \cf0 \cb4 \expnd0\expndtw0\kerning0
\ul \ulc0 \CocoaLigature1 how to create a document and how to query documents.\'a0}}
\f6\fs24 \cf0 \cb4 \expnd0\expndtw0\kerning0
\ul \ulc0 \CocoaLigature1 \

\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \ulnone \CocoaLigature0 \
9. Create Documente, Insert Doc from command line.\
   9.1 mongosh\
   9.2 use Cooker\
   9.3 doc = \{\cf5 "title"\cf2 :\cf5 "Tocos"\cf2 ,\cf5 "desc"\cf2 :\cf5 "yummies tocos"\cf2 ,\cf6 cook_time\cf2 :\cf6 20\cf2 \}        // this will create document in json format with mentioned details\
   9.4 db.tocos.insertOne(doc);     // insert doc into tocos, tocos is a collection in Cooker db, there can be many documents in a collection, this is javascript language \
       \{\
         acknowledged: \cf6 true\cf2 ,\
         insertedId: ObjectId(\cf5 '670bde332662d2f89a307609'\cf2 )\
       \}\
   9.5 db.tocos.find();    // show details\
        [\
          \{\
            _id: ObjectId(\cf5 '670bde332662d2f89a307609'\cf2 ),\
            title: \cf5 'Tocos'\cf2 ,\
            desc: \cf5 'yummies tocos'\cf2 ,\
            cook_time: \cf6 20\cf2 \
          \} \
        ]\
    9.6 Add new document doc2 in tocos collection\
      9.6.1 doc2 = \{\cf5 "title\'94\cf2 :\cf5 \'94Dos Tocos"\cf2 ,\cf5 "desc"\cf2 :\cf5 "yummies tocos"\cf2 ,\cf6 cook_time\cf2 :\cf6 20\cf2 \}\
      9.6.2 db.tocos.insertOne(doc2);\
      9.6.3 db.tocos.find();    // it will show both documents doc and doc2 of collection tocos.\
         [\
          \{\
            _id: ObjectId(\cf5 '670bde332662d2f89a307609'\cf2 ),\
            title: \cf5 'Tocos'\cf2 ,\
            desc: \cf5 'yummies tocos'\cf2 ,\
            cook_time: \cf6 20\cf2 \
         \},\
         \{\
           _id: ObjectId(\cf5 '670be0db2662d2f89a30760a'\cf2 ),\
           title: \cf5 'Dos Tocos'\cf2 ,\
           desc: \cf5 'yummies tocos'\cf2 ,\
           cook_time: \cf6 20\cf2 \
         \}\
        ]\
        \
\
== 
\f6\fs24 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Using .find() to query documents\

\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0
The first parameter for find is a document. Not the document that you're trying to match but rather a query document. If you pass an empty query document that'll match all documents. The default is an empty document. For example, if we do DB dot recipes dot find and don't pass anything, we'll get a whole bunch of stuff back. If we ask for something specific, like where the title is equal to tacos, I will get just one recipe back.\
\
10. Show all documents of collection recipes \
    10.1 db.recipes.find(\{\});                                  // To get back all the documents with just their title you could send an empty document in your search.\
    10.2 db.recipes.find(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \});                   // it will show only Tacos doc from recipes collection\
    10.3 db.recipes.find(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 ,\cf5 "cook_time"\cf2 :\cf6 20\cf2 \});    // we can add more to get exact answer we are looking for\
    10.4 db.recipes.find(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \}, \{\cf5 "title"\cf2 :\cf6 1\cf2 \});      // 1 means true ex: \{\cf5 "title"\cf2 :\cf6 1\cf2 \} it will just show the only title back like this \'97\'97  [ \{ _id: ObjectId(\cf5 '5e5e9c470d33e9e8e3891b35'\cf2 ), title: \cf5 'Tacos'\cf2  \} ]\
    10.5 db.recipes.find(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \}, \{\cf5 "title"\cf2 :\cf6 0\cf2 \});     // You can also exclude fields. So instead of a one here \{\cf5 "title"\cf2 :\cf6 0\cf2 \}, we can make that a zero and it'll bring you back everything but not the title.\
    10.6 db.recipes.find(\{\}, \{\cf5 "title"\cf2 :\cf6 1\cf2 \});                    // To get back all the documents with just their title you could send an empty document in your search.\
    10.7 db.recipes.find(\{\cf5 "title"\cf2 : \{\cf6 $regex\cf2 : \cf8 /taco/i\cf2 \}\}, \{\cf5 "title"\cf2 :\cf6 1\cf2 \});   // But what if I need to search by a partial title? After all, a user of our website is unlikely to type out the exact recipe name. Do that. We use wildcard searches. It's akin to like a like statement in sequel. However, instead of using the percent sign, we use regular expressions. Because remember we're using a JavaScript shell in MongoDB. So we can use regular expressions just like you would in JavaScript. For example, we could do DB dot recipes dot find and this time it's going to look very similar. We're going to ask for title. But we're going to put another bracket here. And we're going to use this dollar sign reg ex. And a slash. I'm just going to write a regular expression here and an I here for case insensitive. And then we're just going to close out our result here. And you'll see we get back two different documents. Actually, it's kind of hard to see so let's use one of the tricks we learned earlier. So we have our query here. And I'm going to give it a second parameter of just title equals one. And now you could see it brought back two different recipes. Chicken soft tacos and tacos. In case you're wondering, we can also do searches on numeric ranges with greater than or less than or queries.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
      \
    10.8 
\fs24 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).preaty()    // recipes is collection, below are documents of recipes.\
   
\fs18       
\fs26 [\
          \{ _id: ObjectId(\cf5 '5e6fd805fa98021236426a24'\cf2 ),title: \cf5 'Chicken Soft Tacos'\cf2  \},\
          \{  _id: ObjectId(\cf5 '5e878f5220a4f574c0aa56db'\cf2 ),title: \cf5 'Maple Smoked Salmon'\cf2  \},\
          \{ _id: ObjectId(\cf5 '5e877cba20a4f574c0aa56da'\cf2 ), title: \cf5 'Pancakes'\cf2  \},\
          \{ _id: ObjectId(\cf5 '5e5e9c470d33e9e8e3891b35'\cf2 ), title: \cf5 'Tacos'\cf2  \},\
          \{ _id: ObjectId(\cf5 '5e87856d07beb474c074c5ca'\cf2 ), title: \cf5 'Brown Sugar Meatloaf'\cf2  \},\
          \{ _id: ObjectId(\cf5 '5edf1d313260aab97ea0d589'\cf2 ), title: \cf5 'Zucchini Brownies'\cf2  \},\
          \{ _id: ObjectId(\cf5 '5edf1cd43260aab97ea0d588'\cf2 ), title: \cf5 'Apple Pie'\cf2  \}\
       ]\
11. There are some command to know\
    
\fs20 11.1 
\fs26 show dbs;                    // it will show all database\
    
\fs20 11.2 
\fs26 db.getName();                // this is will show, in which database you currently\
    
\fs20 11.3 
\fs26 show collections             // this is will show, what are the collection inside current database\
    
\fs20 11.4 
\fs26 db.profile.insertOne(\{\});    // this will create \'93profile\'94 empty collection inside current database
\fs22 \
    \
12. There are also other collection options like cap collections, where we can tell MongoDB to only store a maximum amount of documents at any one time and will automatically delete the oldest documents in the collection to make room for a new one.\
\
13. 
\f5\b Challenge: Create a recipe document\
  
\f0\b0  it's time for our first challenge. For this challenge, you'll need to use a new collection, create a new document for a recipe and that recipe should include at a minimum, certain fields. It should have a title, a description, a star rating, a food type tag, a user comments section, so that could be an array of objects, for example, and optionally directions and ingredients.\
\
14. There are some commands that helps in query.\
    \
    14.1 count(number),  we use this command after find() command in chain\
          CMD: 
\fs26 db.recipes.find(\{\}).count();  // return the number of collections inside current database\
   
\fs22 14.2 limit(number)                             // its will show, how many docs you want to see\
         
\fs24 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).limit(\cf6 3\cf2 );\
   14.3 sort()                  // Now sort will take a document in itself, where the key, being the field you want to sort by. So let's say, title and the value being which direction. So, one, meaning ascending. Negative one, meaning descending. \
        
\fs22  CMD: db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "title"\cf2 :\cf6 1\cf2 \});  //  it will show title in ascending order \
         CMD: 
\fs24 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "title\'94\cf2 :-\cf6 1\cf2 \});  //  it will show title in descending order \
        CMD
\fs20 : 
\fs26 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "title"\cf2 :-\cf6 1\cf2 \}).limit(\cf6 2\cf2 );  // we can add limit \
        
\fs22 CMD:
\fs24  db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "title\'94\cf2 :-\cf6 1\cf2 \}).count();   // we can add. Count  \
   14.4 skip(number).   // how many title you want to skip from top\
        Cmd: 
\fs28 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).skip(\cf6 1\cf2 );\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs32 \
15. 
\f7\b\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Working with operators and arrays
\f0\b0 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
    Since MongoDB uses a JSON-like syntax for its queries, using some traditional operators like greater(>) than and less(<) than won't work. To avoid this problem, the query language uses strings with a dollar sign in front of them. No, this has nothing to do with money, but once you have some of these down you will be able to write much richer queries. How does this work? Well, for example, instead of greater than(>), we have $gt, and instead of less than (<) we have $lt. And instead of less than or equal (<=) to, we have $lte.\
\
\
   15.1 cmd: 
\fs32 db.recipes.find(\{\cf5 "cook_time"\cf2 :\{\cf6 $lt\cf2 :\cf6 30\cf2 \}\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});   // show all docs which has cook_time less 30\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26    15.2 cmd:  
\fs32 db.recipes.find(\{\cf5 "cook_time"\cf2 :\{\cf6 $lt\cf2 :\cf6 30\cf2 \},\cf5 "prep_time"\cf2 :\{\cf6 $lte\cf2 :\cf6 10\cf2 \}\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});\
  15.3 cmd: db.recipes.find(\{\cf6 $or\cf2  :[\{\cf5 "cook_time"\cf2 :\{\cf6 $lte\cf2 :\cf6 30\cf2 \},\cf5 "prep_time"\cf2 :\{\cf6 $lte\cf2 :\cf6 15\cf2 \}\}]\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});   // we have or condition here, either cook time less than equals 30 minutes, or prep time less than equals to 15\
\
  15.4  if you want to search in a array\
        Cmd: db.recipes.find(\{\cf5 "tags"\cf2 : \cf5 "easy"\cf2 \},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}); // if you want to just find tags(array) which has \'93easy\'94, tags = \{
\fs24 \cf9 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 "mexican\'94,"quick\'94,"easy\'94,\cb10 "ground beef"
\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \}\
        cmd: db.recipes.find(\{\cf5 "tags"\cf2 : \{\cf6 $all\cf2 :[\cf5 "easy"\cf2 ,\cf5 "quick"\cf2 ]\}\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});    // it will show recipes which has \cf5 "easy"\cf2  and \cf5 \'93quick"\
        \cf2 cmd: db.recipes.find(\{\cf5 "tags"\cf2 : \{\cf6 $in\cf2 :[\cf5 \'93easy"\cf2 ,\cf5 "quick"\cf2 ]\}\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});    // it will show recipes which has \cf5 "easy"\cf2  or \cf5 \'93quick"\
 
\fs22 \cf2 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs32 16. if we want to reach inside the data of an object or an array, we use dot notation.\
     For that, let's take a look at the ingredients field. Here we have a complex object that has the name of our ingredient and quantity, et cetera. Now   if we want to get back all the recipes with exit them, we could simply use dot notation like so, ingredients.name and egg,
\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs24 \cf9 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs22 \cf2 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab720\partightenfactor0

\f5\b\fs24 \cf11 \cb10 \expnd0\expndtw0\kerning0
\CocoaLigature1 ingredients
\f0\b0 :\'a0Array\'a0(7)\cb1 \
\pard\pardeftab720\qc\partightenfactor0
\cf11 \
\pard\pardeftab720\partightenfactor0

\f5\b \cf11 \cb4 0
\f0\b0 :Object\cb1 \
 
\f5\b \cb4 name
\f0\b0 :\'a0\cf9 "egg"\
\
     
\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 CMD: db.recipes.find(\{\cf5 "ingredients.name"\cf2 :\cf5 "egg"\cf2 \},\{\cf5 "title"\cf2 :\cf6 1\cf2 \});
\fs22 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\
\
\
17. 
\f7\b\fs26 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Updating documents
\f6\b0 \
       17.1  To update title from \'93Pizza\'94 to \'93thin crust Pizza\'94\
                 CMD:
\f7\b   
\f0\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 db.examples.updateOne(\{\cf5 "title\'94\cf2 :\cf5 Pizza\cf2 \},\{\cf6 $set\cf2 :\{\cf5 "title"\cf2 :\cf5 "thin crust Pizza"\cf2 \}\});\
   17.2 if the update field is not present then it will add\
      Cmd: db.examples.updateOne(\{\cf5 "title"\cf2 :\cf5 "thin crust Pizza"\cf2 \},\{\cf6 $set\cf2 :\{\cf5 "vegan"\cf2 :\cf6 false\cf2 \}\});\
   17.3 To remove a field, we can use $unset and field as true\
        Cmd: db.examples.updateOne(\{ \cf5 "title"\cf2 : \cf5 "thin crust Pizza"\cf2  \}, \{ \cf6 $unset\cf2 : \{ \cf5 "vegan"\cf2 : \cf6 true\cf2  \} \});\
   17.4 To increament and decreament a filed without know the field value\
         Cmd: db.examples.updateOne(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \},\{ \cf6 $inc\cf2 : \{\cf5 "likes_count"\cf2 :\cf6 1\cf2 \}\});    // increament \
         Cmd: db.examples.updateOne(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \},\{ \cf6 $inc\cf2 : \{\cf5 "likes_count\'94\cf2 :-\cf6 1\cf2 \}\});    // decreament\
\
18.
\f5\b\fs36  
\f7\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Updating arrays : 
\f6\b0 Working with fields that contain array data means we will need to use some different operators, push and pull. To add an item to an array, we can use push, which will push an item to the end of the array
\f7\b \
\
        
\f6\b0 18.1  To add a user id into likes array use \'93$push\'94\
                Cmd: 
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 db.examples.updateOne(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \},\{ \cf6 $push\cf2 : \{\cf5 "likes"\cf2 :\cf6 60\cf2 \}\});   // it will add user_id 60 into likes = [1,20,60]\
   18.2 if we want to remove the user_id 60 from likes array, use \'93$pull\'94\
      Cmd: 
\f6\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Cmd: 
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 db.examples.updateOne(\{\cf5 "title"\cf2 :\cf5 "Tacos"\cf2 \},\{ \cf6 $pull\cf2 : \{\cf5 "likes"\cf2 :\cf6 60\cf2 \}\});   // it will add user_id 60 into likes = [1,20]\
\
19. 
\f7\b\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Deleting documents: 
\f6\b0 We have two option, delete one or many\
         We have two basic options, delete one or delete many. Both take a filter document, like find in the update commands, for delete one, the first matching document in the collection is deleted. For delete many, all documents that match will be deleted. Obviously, if you're writing a query that you expect to only ever delete a single document, use delete one to be safe. You can provide the underscore ID or any other sort of filter
\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs28 \cf7 \
       19.1 Delete one\
             Cmd: 
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0  db.examples.deleteOne(\{\cf5 "title"\cf2 :\cf5 "Delete me"\cf2 \});   // either we can give _id or title name to filter
\f6\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
       \
20. Chalenges\
      1. First, we need a query that will bring back the top rated recipes, five being the highest rating. Base that off the ratings of Ray, but hint, explore the scheme of the documents and you'll probably see a ratings average field with the average already compiled for you. Use this to order results by the most popular, limited to four.\
        Cmd: 
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 db.recipes.find(\{\},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "rating_avg\'94\cf2 -1\}).limit(\cf6 4\cf2 );\
  2. 
\fs28 For challenge number two, once you have done that, write a query that uses the tags array field in our recipes to bring back the recipes tagged with Mexican, still ordered by top rated and limited to four.\
     Cmd: 
\fs32 db.recipes.find(\{\cf5 "tags"\cf2 :\{\cf6 $all\cf2 :[\cf5 "mexican"\cf2 ]\}\},\{\cf5 "title\'94\cf2 :-\cf6 1\cf2 \}).sort(\{\cf5 "rating_avg"\cf2 :\cf6 1\cf2 \}).limit(\cf6 4\cf2 );\
    Or 
\fs28 CMD
\fs32 : db.recipes.find(\{\cf5 "tags"\cf2 :\cf5 "mexican"\cf2 \},\{\cf5 "title"\cf2 :\cf6 1\cf2 \}).sort(\{\cf5 "rating_avg"\cf2 :\cf6 1\cf2 \}).limit(\cf6 4\cf2 );\
\
  3. And the last challenge, write a brand new query that gets back all the recipes liked by user ID 1, sorted by the title with no limit.\
     Cmd: db.recipes.find(\{\cf5 "likes"\cf2 :\{\cf6 $all\cf2 :[\cf6 1\cf2 ]\}\},\{\cf5 "title"\cf2 :\cf6 1\cf2 ,\cf5 "likes"\cf2 :\cf6 1\cf2 \}\}).sort(\{\cf5 "titles"\cf2 :\cf6 1\cf2 \});\
\
\
Question:\
 1. 
\f6 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 How should you list the recipes that have tags of both "easy" and "mexican"?\
         Cmd: 
\f3\fs24\fsmilli12250 \cb12 db.recipes.find(\{ "tags" : \{ $all: ["easy", "mexican"] \}\}, \{"title":1, "tags" :1\});   // 
\f6\fs28 \cb4 In order to not look for an exact match for the array ["easy", "mexican"], we need to use \{ $all: ["easy", "mexican"] \}\}.
\f3\fs24\fsmilli12250 \cb12 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
 2. 
\f6 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 You have a collection named "recipes" that contains a number of food recipes. How can you list the recipes that take less than 30 minutes to cook and less than 10 minutes to prepare?\
     Cmd: 
\f3\fs28\fsmilli14250 db.recipes.find(\{"cook_time" : \{$lte : 30\}, "prep_time" : \{$lte : 10\}\}, \{"title" : 1\});
\fs24\fsmilli12250 \cb1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f6\fs28 \cf7 \cb4   3. 
\fs32 Which field update operator should you use to update a field in a document?
\fs28 \
       Cmd: $set      // Note that the $set operator is used to replace the value of a field with a specified value.\
  \
  4. 
\fs32 You have a collection named "recipes" that contains a number of food recipes. How can you list all the recipes in ascending order?\
       Cmd: 
\f3\fs24\fsmilli12250 \cb12 db.recipes.find(\{\},\{"title": 1\}).sort(\{"title" : 1\});              // 
\f6\fs28 \cb4 To list the recipes in descending order, use -1 instead of 1 in the "sort()" function.\
\
  5. 
\fs32 You have a collection named "recipes" that contains a number of food recipes. How can you list only the first two recipes in the collection?\
     Cmd: 
\f3\fs24\fsmilli12250 \cb12 db.recipes.find(\{\},\{"title": 1\}).limit(2);        // 
\f6\fs28 \cb4 You can list more or less of the total list by varying the number sent to the "limit()" function.
\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
 \
\
 
\fs30 6. 
\f6\fs32 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Which collection method should you use to delete a single file document?\
        Cmd: 
\f3\fs24\fsmilli12250 \cb12 db.collection.deleteOne()    // 
\f6\fs28 \cb4 This method is used to delete the first matching document from a collection.\
  \
  7. 
\fs32 Which array update operator should you use to add an item to an array?\
      Cmd: 
\fs28 $push      // 
\fs32 \cb1 you can use the $push operator to add an element in an array.\
 \
 8. 
\fs28 \cb4 7. 
\fs32 Which array update operator should you use to remove an item from an array?\
      Cmd: 
\fs28 $pull      // Conversely, you can use the $pull operator to remove an element from an array.
\fs32 \cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls30\ilvl0\cf7 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \cb4 \
 
\fs36 \
21. 
\f7\b\fs32 How you need to think differently
\f6\b0\fs24 \

\fs32         MongoDB likes to say, data that is accessed together should be stored together, meaning if you're going to be reading or writing data together, it is usually a good idea to store them together. Instead of storing data in two different places you should be thinking about how you might be able to embed one of those pieces of data inside the other.\
\
22.  The important part here is under execution stats. You could see a total docs examined with below command.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0    Cmd: db.recipes.find(\{\cf6 cook_time\cf2 :\cf6 10\cf2 \},\{\cf6 title\cf2 :\cf6 1\cf2 \}).explain(\cf5 "executionStats\'94\cf2 );\\\
\
Below commands we can perform on a collection\
\
db.recipes.__proto__                        db.recipes.constructor                      db.recipes.hasOwnProperty\
db.recipes.isPrototypeOf                    db.recipes.propertyIsEnumerable             db.recipes.toLocaleString\
db.recipes.toString                         db.recipes.valueOf                          db.recipes.aggregate\
db.recipes.bulkWrite                        db.recipes.countDocuments                   db.recipes.deleteMany\
db.recipes.deleteOne                        db.recipes.distinct                         db.recipes.estimatedDocumentCount\
db.recipes.find                             db.recipes.findOne                          db.recipes.renameCollection\
db.recipes.findOneAndDelete                 db.recipes.findOneAndReplace                db.recipes.findOneAndUpdate\
db.recipes.insertMany                       db.recipes.insertOne                        db.recipes.isCapped\
db.recipes.replaceOne                       db.recipes.updateMany                       db.recipes.updateOne\
db.recipes.compactStructuredEncryptionData  db.recipes.convertToCapped                  db.recipes.createIndexes\
db.recipes.createIndex                      db.recipes.ensureIndex                      db.recipes.getIndexes\
db.recipes.getIndexSpecs                    db.recipes.getIndices                       db.recipes.getIndexKeys\
db.recipes.dropIndexes                      db.recipes.dropIndex                        db.recipes.totalIndexSize\
db.recipes.getDB                            db.recipes.getMongo                         db.recipes.dataSize\
db.recipes.storageSize                      db.recipes.totalSize                        db.recipes.drop\
db.recipes.exists                           db.recipes.getFullName                      db.recipes.getName\
db.recipes.runCommand                       db.recipes.explain                          db.recipes.stats\
db.recipes.latencyStats                     db.recipes.initializeOrderedBulkOp          db.recipes.initializeUnorderedBulkOp\
db.recipes.getPlanCache                     db.recipes.validate                         db.recipes.hideIndex\
db.recipes.unhideIndex                      db.recipes.getSearchIndexes                 db.recipes.createSearchIndex\
db.recipes.createSearchIndexes              db.recipes.dropSearchIndex                  db.recipes.updateSearchIndex
\fs22 \
\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\fs26 23.
\fs22  
\f5\b\fs26 So how do we create an index?
\f0\b0\fs22 \
     
\fs28 23.1
\fs22  
\fs32 db.recipes.createIndex(\{\cf5 "title\'94\cf2 :\cf6 1\cf2 \});\
   
\f5\b 23.2
\f0\b0  db.recipes.getIndex();
\fs22 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f5\b\fs26 24 
\f7\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Using different collection types\
         1. Cap collection\
         2. Time series collection\
      24.1 
\f0\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0  db.createCollection(\cf5 "error_log"\cf2 ,\{\cf6 capped\cf2 :\cf6 true\cf2 ,\cf6 size\cf2 :\cf6 10000\cf2 ,\cf6 max\cf2 :\cf6 10000\cf2 \});  // this is how you can create error_log using cap collection
\f6\fs24 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
\
25 Question\
   We have a list of backers that has user ID, first name, last name, email, and a backing level. We have a separate list of shipping addresses with a user ID, street name, city, zip state, et cetera. And then lastly, have a completely separate list that has user ID and an item name of their backer reward. And the user may have one or more of these items. So how can we take these different bits of data and instead of say putting them in different tables and joining 'em together, store them in a single document, that is a document for each backer.\
\
      backers List\
        user ID\
        first name\
        last name\
        email\
        backing level \
\
      addresses List\
         user ID\
         street name\
         city\
         zip state\
\
      backer reward List\
         user ID\
         item name\
\
\
 Explanation : backers is collection and shipping address should be object and rewards should be an array. We create object with curly brace\{\} and array with square brackets. Object has key value pair where array has just value. See the below example \
   Cmd: 
\fs32  db.bakers.insertOne(\{\cf5 "user_id"\cf2 :\cf6 1\cf2 ,\cf6 fisrt_name\cf2 :\cf5 "Golu"\cf2 ,\cf6 last_name\cf2 :\cf5 "singh"\cf2 ,\cf6 email\cf2 :\cf5 "golu@gmail.com"\cf2 ,\cf6 backing_level\cf2 :\cf6 1\cf2 ,\cf6 shipping_address\cf2 :\{\cf6 street_name\cf2 :\cf5 "123 gachibowli hyd"\cf2 ,\cf6 city\cf2 :\cf5 "mumbai"\cf2 ,\cf6 state\cf2 :\cf5 "maharastra"\cf2 ,\cf6 zip\cf2 :\cf6 12345\cf2 \},\cf5 "rewars"\cf2 :[\cf5 "book"\cf2 ,\cf5 "beach towel"\cf2 ]\});\
\
   Or we can store in document and then insert the document.\
      1.  becker2=\{\cf5 "user_id"\cf2 :\cf6 1\cf2 ,\cf6 fisrt_name\cf2 :\cf5 "sumit"\cf2 ,\cf6 last_name\cf2 :\cf5 "singh"\cf2 ,\cf6 email\cf2 :\cf5 "sumit@gmail.com"\cf2 ,\cf6 backing_level\cf2 :\cf6 1\cf2 ,\cf6 shipping_address\cf2 :\{\cf6 street_name\cf2 :\cf5 "124 gachibowli hyd"\cf2 ,\cf6 city\cf2 :\cf5 "mumbai"\cf2 ,\cf6 state\cf2 :\cf5 "maharastra"\cf2 ,\cf6 zip\cf2 :\cf6 12355\cf2 \},\cf5 "rewars"\cf2 :[\cf5 "book"\cf2 ,\cf5 "beach towel"\cf2 ]\};\
      \
      2. db.bakers.insertOne(becker2);\
\
25. 
\f6 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 Which collection method should you use to remove an index?\
         Cmd: 
\f3\fs24\fsmilli12250 \cb12 db.collection.dropIndex()       // 
\f6\fs28 \cb4 You can also use "dropIndexes()" to drop one or many specified indexes.
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
       
\fs22 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f5\b\fs28 26. 
\f7\fs30 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 How to use GridFS to store files?
\f6\b0\fs24 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
       You can not only store documents in MongoDB, you can store entire files. This opens up a lot of possibilities, not only for better organization but also application features. To do this, MongoDB uses what's called GridFS, a technology that will break up the contents of the file into chunks each stored in its own document and also store the information about the file itself in a sort of parent document. When you need the file back, MongoDB will simply stream the chunks back to you. A great way to get started with GridFS is to use the mongofiles binary that's included with the database tools.\
\
    
\fs28  1. How to upload image to mongodb?\
        # goto image folder and run this command \
       a. 
\fs32  mongofiles put apple-pie.jpg --db=files
\fs22   // it will upload image to fils db, we can upload pdf as well, just give the pdf file name instead image name\
         
\f5\b\fs28 b.
\f0\b0\fs22  
\fs32  mongofiles list \'97db=files \'97quiet   // it will show the upload image to file db\
      c. mongofiles delete apple-pie.jpg --db=files
\fs22   
\fs32   // it will delete the image from file db\
       d. mongofiles get apple-pie.jpg --db=files
\fs22   
\fs32   // it will download the image from file db to local \
\
27. 
\f7\b \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 What is MongoDB-GridFS?\
          
\f6\b0\fs28 A technology that breaks up file contents into chunks in the form of documents. GridFS is used to deal with files that exceed the BSON size limit.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\b\fs34 \cf7 28. 
\fs30 MongoDB config file\
        Cmd: 
\f0\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0  mongod --config=mongod.conf\
\
29. Server Administration\
    1. Mongodb config file\
    2. Replica\
    3. Sharding\
    4. Authentication and authorisation\
    5. Backup	\
\
\
Questions:\
 1. 
\f6 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 How should you describe authorization?\
        - 
\f0 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 	
\f6\fs28 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1 determining and controlling what resources an authenticated user can use  // This can also be referred to as role-based access control.\
 \
   2.\
\
   3. 
\fs32 How can you force MongoDB to halt writes when creating backups?\
      - 
\f3\fs24\fsmilli12250 \cb12 db.fsyncLock();   // 
\f6\fs28 \cb4 You will have to use "db.fsyncUnlock()" once you have created your backups.\
   4. 
\fs32 What line(s) should be present in your mongod.cfg to enable access control? \
       
\fs38  
\f3\fs30\fsmilli15250 \cb12 security:     \
\pard\pardeftab720\partightenfactor0
\cf7      authorization: enabled
\fs24\fsmilli12250 \
\
  
\fs34\fsmilli17250 5.
\fs24\fsmilli12250  
\f6\fs32 \cb4 What entry do you need in your config file to require role-based authentication?\
           
\f3\fs30\fsmilli15250 \cb12 security:    \
     authorization: enabled
\fs24\fsmilli12250 \
\
\
 
\fs34\fsmilli17250  6.
\fs24\fsmilli12250  
\f6\fs32 \cb4 Which config file setting will ensure that MongoDB will run as a background process by default?\
        
\fs38    
\f3\fs30\fsmilli15250 \cb12 processManagement:           // 
\f6\fs34 \cb4 Note that MongoDB is not forked by default, so this edit is required if you need it to be.
\f3\fs30\fsmilli15250 \cb12 \
       fork: true
\fs24\fsmilli12250 \
\
   
\fs30\fsmilli15250 7.
\fs24\fsmilli12250  
\f6\fs32 \cb4 How should you describe sharding?\
           - 
\fs28 partitioning data across multiple servers. // Unlike replication, sharding does not copy the whole data set.\
\
      8. 
\fs32 How should you describe a replica set in MongoDB?\
          - 
\fs28 a set of identical data nodes where one is the primary node and the other(s) are secondary nodes        // The secondary nodes offer redundancy and increase data availability.
\f0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f7\b\fs30 \cf7 \cb4 \expnd0\expndtw0\kerning0
\CocoaLigature1     \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f6\b0\fs24 \cf7 \

\f0\fs22 \cf2 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\
\
\
\
\
\
\
\
\
\
\
}